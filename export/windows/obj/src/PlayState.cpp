// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_9_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",9,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_26_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",26,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_49_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",49,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_9_new)
HXLINE(  20)		this->ballMoving = false;
HXLINE(  19)		this->ballAngle = ((Float)0);
HXLINE(  17)		this->ballSpeed = 200;
HXLINE(  16)		this->paddleSpeed = 200;
HXLINE(   9)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0a05f89d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_26_create)
HXLINE(  27)		this->super::create();
HXLINE(  29)		this->paddle1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(8,96,-1,null(),null());
HXLINE(  30)		this->paddle1->set_x(( (Float)(16) ));
HXLINE(  31)		 ::flixel::FlxSprite _hx_tmp = this->paddle1;
HXDLIN(  31)		int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN(  31)		_hx_tmp->set_y(((( (Float)(_hx_tmp1) ) - this->paddle1->get_height()) / ( (Float)(2) )));
HXLINE(  32)		this->add(this->paddle1);
HXLINE(  34)		this->paddle2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(8,96,-1,null(),null());
HXLINE(  35)		 ::flixel::FlxSprite _hx_tmp2 = this->paddle2;
HXDLIN(  35)		int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN(  35)		_hx_tmp2->set_x(((( (Float)(_hx_tmp3) ) - this->paddle2->get_width()) - ( (Float)(16) )));
HXLINE(  36)		 ::flixel::FlxSprite _hx_tmp4 = this->paddle2;
HXDLIN(  36)		int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN(  36)		_hx_tmp4->set_y(((( (Float)(_hx_tmp5) ) - this->paddle2->get_height()) / ( (Float)(2) )));
HXLINE(  37)		this->add(this->paddle2);
HXLINE(  39)		this->ball =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(8,8,-1,null(),null());
HXLINE(  40)		 ::flixel::FlxSprite _hx_tmp6 = this->ball;
HXDLIN(  40)		int _hx_tmp7 = ::flixel::FlxG_obj::width;
HXDLIN(  40)		_hx_tmp6->set_x(((( (Float)(_hx_tmp7) ) - this->ball->get_width()) / ( (Float)(2) )));
HXLINE(  41)		 ::flixel::FlxSprite _hx_tmp8 = this->ball;
HXDLIN(  41)		int _hx_tmp9 = ::flixel::FlxG_obj::height;
HXDLIN(  41)		_hx_tmp8->set_y(((( (Float)(_hx_tmp9) ) - this->ball->get_height()) / ( (Float)(2) )));
HXLINE(  42)		this->add(this->ball);
HXLINE(  44)		this->paddlehit = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/paddlehit.wav",e8,38,73,ba),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  45)		this->death = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/death.wav",f3,f4,63,90),null(),null(),null(),null(),null(),null(),null(),null());
            	}


void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_49_update)
HXLINE(  50)		this->super::update(elapsed);
HXLINE(  53)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  53)		if (_this->keyManager->checkStatusUnsafe(87,_this->status)) {
HXLINE(  55)			 ::flixel::FlxSprite fh = this->paddle1;
HXDLIN(  55)			fh->set_y((fh->y - (( (Float)(this->paddleSpeed) ) * elapsed)));
            		}
HXLINE(  57)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  57)		if (_this1->keyManager->checkStatusUnsafe(83,_this1->status)) {
HXLINE(  59)			 ::flixel::FlxSprite fh1 = this->paddle1;
HXDLIN(  59)			fh1->set_y((fh1->y + (( (Float)(this->paddleSpeed) ) * elapsed)));
            		}
HXLINE(  63)		bool _hx_tmp;
HXDLIN(  63)		if (this->ballMoving) {
HXLINE(  63)			_hx_tmp = (this->ballVelocity->x > 0);
            		}
            		else {
HXLINE(  63)			_hx_tmp = false;
            		}
HXDLIN(  63)		if (_hx_tmp) {
HXLINE(  65)			Float _hx_tmp1 = this->paddle2->y;
HXDLIN(  65)			Float _hx_tmp2 = (_hx_tmp1 + (this->paddle2->get_height() / ( (Float)(2) )));
HXDLIN(  65)			Float _hx_tmp3 = this->ball->y;
HXDLIN(  65)			if ((_hx_tmp2 < (_hx_tmp3 + (this->ball->get_height() / ( (Float)(2) ))))) {
HXLINE(  67)				 ::flixel::FlxSprite fh2 = this->paddle2;
HXDLIN(  67)				fh2->set_y((fh2->y + (( (Float)(this->paddleSpeed) ) * elapsed)));
            			}
            			else {
HXLINE(  69)				Float _hx_tmp4 = this->paddle2->y;
HXDLIN(  69)				Float _hx_tmp5 = (_hx_tmp4 + (this->paddle2->get_height() / ( (Float)(2) )));
HXDLIN(  69)				Float _hx_tmp6 = this->ball->y;
HXDLIN(  69)				if ((_hx_tmp5 > (_hx_tmp6 + (this->ball->get_height() / ( (Float)(2) ))))) {
HXLINE(  71)					 ::flixel::FlxSprite fh3 = this->paddle2;
HXDLIN(  71)					fh3->set_y((fh3->y - (( (Float)(this->paddleSpeed) ) * elapsed)));
            				}
            			}
            		}
HXLINE(  77)		if ((this->paddle1->y < 0)) {
HXLINE(  79)			this->paddle1->set_y(( (Float)(0) ));
            		}
            		else {
HXLINE(  81)			Float _hx_tmp7 = this->paddle1->y;
HXDLIN(  81)			Float _hx_tmp8 = (_hx_tmp7 + this->paddle1->get_height());
HXDLIN(  81)			if ((_hx_tmp8 > ::flixel::FlxG_obj::height)) {
HXLINE(  83)				 ::flixel::FlxSprite _hx_tmp9 = this->paddle1;
HXDLIN(  83)				int _hx_tmp10 = ::flixel::FlxG_obj::height;
HXDLIN(  83)				_hx_tmp9->set_y((( (Float)(_hx_tmp10) ) - this->paddle1->get_height()));
            			}
            		}
HXLINE(  86)		if ((this->paddle2->y < 0)) {
HXLINE(  88)			this->paddle2->set_y(( (Float)(0) ));
            		}
            		else {
HXLINE(  90)			Float _hx_tmp11 = this->paddle2->y;
HXDLIN(  90)			Float _hx_tmp12 = (_hx_tmp11 + this->paddle2->get_height());
HXDLIN(  90)			if ((_hx_tmp12 > ::flixel::FlxG_obj::height)) {
HXLINE(  92)				 ::flixel::FlxSprite _hx_tmp13 = this->paddle2;
HXDLIN(  92)				int _hx_tmp14 = ::flixel::FlxG_obj::height;
HXDLIN(  92)				_hx_tmp13->set_y((( (Float)(_hx_tmp14) ) - this->paddle2->get_height()));
            			}
            		}
HXLINE(  96)		if (this->ballMoving) {
HXLINE(  98)			 ::flixel::FlxSprite fh4 = this->ball;
HXDLIN(  98)			fh4->set_x((fh4->x + (this->ballVelocity->x * elapsed)));
HXLINE(  99)			 ::flixel::FlxSprite fh5 = this->ball;
HXDLIN(  99)			fh5->set_y((fh5->y + (this->ballVelocity->y * elapsed)));
HXLINE( 102)			if ((this->ball->y < 0)) {
HXLINE( 104)				this->ball->set_y(( (Float)(0) ));
HXLINE( 105)				this->ballVelocity->set_y((this->ballVelocity->y * ( (Float)(-1) )));
            			}
            			else {
HXLINE( 107)				Float _hx_tmp15 = this->ball->y;
HXDLIN( 107)				Float _hx_tmp16 = (_hx_tmp15 + this->ball->get_height());
HXDLIN( 107)				if ((_hx_tmp16 > ::flixel::FlxG_obj::height)) {
HXLINE( 109)					 ::flixel::FlxSprite _hx_tmp17 = this->ball;
HXDLIN( 109)					int _hx_tmp18 = ::flixel::FlxG_obj::height;
HXDLIN( 109)					_hx_tmp17->set_y((( (Float)(_hx_tmp18) ) - this->ball->get_height()));
HXLINE( 110)					this->ballVelocity->set_y((this->ballVelocity->y * ( (Float)(-1) )));
            				}
            			}
HXLINE( 114)			if (this->ball->overlaps(this->paddle1,null(),null())) {
HXLINE( 116)				 ::flixel::FlxSprite _hx_tmp19 = this->ball;
HXDLIN( 116)				Float _hx_tmp20 = this->paddle1->x;
HXDLIN( 116)				_hx_tmp19->set_x((_hx_tmp20 + this->paddle1->get_width()));
HXLINE( 117)				this->ballVelocity->set_x((this->ballVelocity->x * ( (Float)(-1) )));
HXLINE( 118)				this->paddlehit->proximity(this->ball->x,this->ball->y,this->paddle1,this->paddle2->x,null());
HXLINE( 119)				this->paddlehit->play(null(),null(),null());
            			}
            			else {
HXLINE( 121)				if (this->ball->overlaps(this->paddle2,null(),null())) {
HXLINE( 123)					 ::flixel::FlxSprite _hx_tmp21 = this->ball;
HXDLIN( 123)					Float _hx_tmp22 = this->paddle2->x;
HXDLIN( 123)					_hx_tmp21->set_x((_hx_tmp22 - this->ball->get_width()));
HXLINE( 124)					this->ballVelocity->set_x((this->ballVelocity->x * ( (Float)(-1) )));
HXLINE( 125)					this->paddlehit->proximity(this->ball->x,this->ball->y,this->paddle2,this->paddle1->x,null());
HXLINE( 126)					this->paddlehit->play(null(),null(),null());
            				}
            			}
HXLINE( 130)			if ((this->ball->x < 0)) {
HXLINE( 132)				this->ballMoving = false;
HXLINE( 133)				 ::flixel::FlxSprite _hx_tmp23 = this->ball;
HXDLIN( 133)				int _hx_tmp24 = ::flixel::FlxG_obj::width;
HXDLIN( 133)				_hx_tmp23->set_x(((( (Float)(_hx_tmp24) ) - this->ball->get_width()) / ( (Float)(2) )));
HXLINE( 134)				 ::flixel::FlxSprite _hx_tmp25 = this->ball;
HXDLIN( 134)				int _hx_tmp26 = ::flixel::FlxG_obj::height;
HXDLIN( 134)				_hx_tmp25->set_y(((( (Float)(_hx_tmp26) ) - this->ball->get_height()) / ( (Float)(2) )));
HXLINE( 135)				this->ballVelocity->set_x((this->ballVelocity->x * ( (Float)(-1) )));
HXLINE( 136)				this->death->play(null(),null(),null());
            			}
            			else {
HXLINE( 138)				Float _hx_tmp27 = this->ball->x;
HXDLIN( 138)				Float _hx_tmp28 = (_hx_tmp27 + this->ball->get_width());
HXDLIN( 138)				if ((_hx_tmp28 > ::flixel::FlxG_obj::width)) {
HXLINE( 140)					this->ballMoving = false;
HXLINE( 141)					 ::flixel::FlxSprite _hx_tmp29 = this->ball;
HXDLIN( 141)					int _hx_tmp30 = ::flixel::FlxG_obj::width;
HXDLIN( 141)					_hx_tmp29->set_x(((( (Float)(_hx_tmp30) ) - this->ball->get_width()) / ( (Float)(2) )));
HXLINE( 142)					 ::flixel::FlxSprite _hx_tmp31 = this->ball;
HXDLIN( 142)					int _hx_tmp32 = ::flixel::FlxG_obj::height;
HXDLIN( 142)					_hx_tmp31->set_y(((( (Float)(_hx_tmp32) ) - this->ball->get_height()) / ( (Float)(2) )));
HXLINE( 143)					this->ballVelocity->set_x((this->ballVelocity->x * ( (Float)(-1) )));
HXLINE( 144)					this->death->play(null(),null(),null());
            				}
            			}
            		}
            		else {
HXLINE( 149)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 149)			if (_this2->keyManager->checkStatusUnsafe(32,_this2->status)) {
HXLINE( 151)				this->ballMoving = true;
HXLINE( 152)				this->ballAngle = ((::Math_obj::random() * ::Math_obj::PI) * ( (Float)(2) ));
HXLINE( 153)				this->ballVelocity =  ::flixel::math::FlxBasePoint_obj::__alloc( HX_CTX ,::Math_obj::cos(this->ballAngle),::Math_obj::sin(this->ballAngle));
HXLINE( 154)				this->ballVelocity->set_x((this->ballVelocity->x * ( (Float)(this->ballSpeed) )));
HXLINE( 155)				this->ballVelocity->set_y((this->ballVelocity->y * ( (Float)(this->ballSpeed) )));
            			}
            		}
            	}



::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(paddle1,"paddle1");
	HX_MARK_MEMBER_NAME(paddle2,"paddle2");
	HX_MARK_MEMBER_NAME(ball,"ball");
	HX_MARK_MEMBER_NAME(paddleSpeed,"paddleSpeed");
	HX_MARK_MEMBER_NAME(ballSpeed,"ballSpeed");
	HX_MARK_MEMBER_NAME(ballVelocity,"ballVelocity");
	HX_MARK_MEMBER_NAME(ballAngle,"ballAngle");
	HX_MARK_MEMBER_NAME(ballMoving,"ballMoving");
	HX_MARK_MEMBER_NAME(paddlehit,"paddlehit");
	HX_MARK_MEMBER_NAME(death,"death");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(paddle1,"paddle1");
	HX_VISIT_MEMBER_NAME(paddle2,"paddle2");
	HX_VISIT_MEMBER_NAME(ball,"ball");
	HX_VISIT_MEMBER_NAME(paddleSpeed,"paddleSpeed");
	HX_VISIT_MEMBER_NAME(ballSpeed,"ballSpeed");
	HX_VISIT_MEMBER_NAME(ballVelocity,"ballVelocity");
	HX_VISIT_MEMBER_NAME(ballAngle,"ballAngle");
	HX_VISIT_MEMBER_NAME(ballMoving,"ballMoving");
	HX_VISIT_MEMBER_NAME(paddlehit,"paddlehit");
	HX_VISIT_MEMBER_NAME(death,"death");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ball") ) { return ::hx::Val( ball ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"death") ) { return ::hx::Val( death ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"paddle1") ) { return ::hx::Val( paddle1 ); }
		if (HX_FIELD_EQ(inName,"paddle2") ) { return ::hx::Val( paddle2 ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ballSpeed") ) { return ::hx::Val( ballSpeed ); }
		if (HX_FIELD_EQ(inName,"ballAngle") ) { return ::hx::Val( ballAngle ); }
		if (HX_FIELD_EQ(inName,"paddlehit") ) { return ::hx::Val( paddlehit ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"ballMoving") ) { return ::hx::Val( ballMoving ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddleSpeed") ) { return ::hx::Val( paddleSpeed ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ballVelocity") ) { return ::hx::Val( ballVelocity ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ball") ) { ball=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"death") ) { death=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"paddle1") ) { paddle1=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddle2") ) { paddle2=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ballSpeed") ) { ballSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ballAngle") ) { ballAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddlehit") ) { paddlehit=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"ballMoving") ) { ballMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddleSpeed") ) { paddleSpeed=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ballVelocity") ) { ballVelocity=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("paddle1",87,98,7f,d0));
	outFields->push(HX_("paddle2",88,98,7f,d0));
	outFields->push(HX_("ball",ff,e1,10,41));
	outFields->push(HX_("paddleSpeed",bd,82,38,fd));
	outFields->push(HX_("ballSpeed",08,89,b7,3a));
	outFields->push(HX_("ballVelocity",3c,37,81,15));
	outFields->push(HX_("ballAngle",54,35,30,dc));
	outFields->push(HX_("ballMoving",ed,51,95,37));
	outFields->push(HX_("paddlehit",29,20,26,a2));
	outFields->push(HX_("death",34,8f,1e,d7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,paddle1),HX_("paddle1",87,98,7f,d0)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,paddle2),HX_("paddle2",88,98,7f,d0)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,ball),HX_("ball",ff,e1,10,41)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,paddleSpeed),HX_("paddleSpeed",bd,82,38,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,ballSpeed),HX_("ballSpeed",08,89,b7,3a)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(PlayState_obj,ballVelocity),HX_("ballVelocity",3c,37,81,15)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,ballAngle),HX_("ballAngle",54,35,30,dc)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,ballMoving),HX_("ballMoving",ed,51,95,37)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(PlayState_obj,paddlehit),HX_("paddlehit",29,20,26,a2)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(PlayState_obj,death),HX_("death",34,8f,1e,d7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("paddle1",87,98,7f,d0),
	HX_("paddle2",88,98,7f,d0),
	HX_("ball",ff,e1,10,41),
	HX_("paddleSpeed",bd,82,38,fd),
	HX_("ballSpeed",08,89,b7,3a),
	HX_("ballVelocity",3c,37,81,15),
	HX_("ballAngle",54,35,30,dc),
	HX_("ballMoving",ed,51,95,37),
	HX_("paddlehit",29,20,26,a2),
	HX_("death",34,8f,1e,d7),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

